- REACT 란?
    자바스크립트 라이브러리
    MVC MVVM과 같은 프레임워크와 다르게 오직 View 만 처리
- SPA 구조
    Single Page Application
    index.html 하나만 로드하고 실행시키는 구조

- REACT 구동
    > 번들러(Webpack)이 모든 것을 동작시킴
    > Webpack 이란 Application을 동작시키는데 필요한 자원(js파일, CSS, image 등)을
        하나로 묶어서 조합하여 경량화한 후 결과를 보여주는 도구
    > 번들러는 node.js를 통해서 직접 설정이 가능하지만 리액트 프로젝트 생성 시 자동으로 포함되어 동작

DOM(Document Object Model)
    > HTML을 이해하기 쉽도록 트리 구조로 만들어진 태그(객체)
    > HTML 방식이 아닌 다른 방식으로 접근시에 사용되는 구조

- 리액트의 Virtual DOM
    ? 화면의 일부만 리렌더 하여 처리 시간을 감축
    > Virtual DOM은 메모리에 있는 데이터

Git에 업로드 시에는 node module이 빠져 있음

패키지 관리자
    - npm / npx / yarn(기본설치x)

1. npm(node package manager)
    - 자바스크립트 런타임 환경 Node.js의 기본 패키지 관리자
    - 자바스크립트 환경에서 프로젝트를 시작할 때 node와 함께 설치 사용 빈도가 높음 용량 큼

    - 패키지 설치(package.json 기준)
        npm install : package.json에 들어있는 모든 패키지를 설치
        npm install <패키지명>@<태그|버젼|버젼 범위> : 특정 패키지 설치
        npm ci : package-lock.json을 기준으로 설치
    - 패키지 업데이트
        npm update [-g] [패키지명1, 패키지명2, ...] ([-g]는 프로젝트가 아닌 전역에 node.js 기본 설치 install 명령어 동용)
    - 패키지 삭제
        npm uninstall [@scope/]패키지명[@버젼] [-S|--save|-D|--save-dev|-O|--save-optional]
        npm remove(rm)


2. npx(excuted npm binaries)
    - npx는 npm에 속해 있는 패키지 실행 도구(npm와 같은 관리 도구가 아님)
    - 다른 사람의 git에 있는 프로젝트를 download 하여 
        package.json의 script중 하나를 실행하고 싶을 때 패키지가 설치되어 있어야 하는데
        npx는 스크립트만으로도 패키지 설치를 하지 않고 실행 가능함

3. yarn
    - 안전하고 안정적으로 재현 가능한 프로젝트
    - yarn은 npm이나 npx와 결을 달리하는 패키지 관리자
    - 속도나 안정성 면에서 npm과 비슷하거나 더 나음(v2 기준)
    - 버젼의 통일성, 높은 보안성, 버그 빈도도 낮음
    - 기본적으로 설치되어 있지 않음

    
        yarn : 의존성(패키지) 설치
        yarn add 패키지명 : 패키지 설치
        yarn upgrade : 패키지 업데이트
        yarn remove 패키지명 : 패키지 삭제
        yarn init : 프로젝트 초기화(npm init)
        yarn run : 스크립트 실행
        yarn 패키지명령어 : bin 패키지 실행

** JSX
    - JS의 확장 문법으로 HTML에 JS코드를 녹여낸 형태
    - 리액트의 생김새를 정의할 때 사용하 문법 HTML과 같아 보이지만 실제로는 Javascript
    - 코드를 수정하게 될 때 화면이 자동으로 리렌더링(Webpack Loader 작동)
    - Webpack Loader는 직접 설정이 가능하고 create react-app 생성시 자동으로 설정

** Webpack Loader는 다양한 종류가 있음
    1. CSS로더 - CSS로드
    2. File로더 - 폰트, 이미지, 파일 등을 로드
    3. Babel로더 - ES6 문법을 화면에 사용할 ES5 문법으로 다운그레이드
        > 설정 파일은 webpackConfig.js
        
## React의 JSX 문법(기본 규칙)
    1. JSX의 주석 처리 (vscode : alt + shift + a)
    2. JSX문법은 반드시 하나의 태그를 return
    3. div를 사용하고 싶지 않다면 </> Fragment component를 사용해야함
    4. 함수 안에서 만들어진 변수는 중괄호를 사용하여 참조할 수 있음 ex) {name}
    5. if문 대신에 3항 연산자를 사용해야함
    6. 화면에 보여주고 싶은 게 없다면 null을 return
    7. undefined를 반환해서는 안됨
    8. DOM요소에 style을 직접 적용할 때는 반드시 객체형 개체로 묶고, 속성은 camel 표기법 사용
    9. 태그의 class속성은 className을 적용
    10. HTML에서 홀로 사용하는 태그는 닫는 태그를 반드시 작성
        <br>    => <br></br> or <br/>
        <img>   => <img></img> or <img/>

## Component
    - component는 일종의 UI조각 쉽게 재사용이 가능하고 함수형과 클래스형이 존재함
    [함수형]
    function Welcome(props) {
        return <h1>Hello, {props.name}</h1>;
    }
    [클래스형]
    class Welcome extends React.Component {
        render() {
            return <h1>Hello, {this.props.name}</h1>;
        }
    }
    - react의 component는 tree 구조

## 조건부 렌더링
    특정 조건에 따라 다른 결과물을 렌더링

## useStatus를 통한 Component에서 바뀌는 값 관리하기

React 16.8 이전에는 함수형 component를 관리할 수 없었으나 이후 부터는
Hooks라는 기능을 도입하면서 함수형 component에 대해 관리할 수 있게 됨
useStatus는 Hooks 중 하나

## State
    1. React에서 state는 Component 내부에서 바뀔 수 있는 값을 의미함
    2. state가 change 되면 변화를 감지하여 re-rendering을 수행함
    3. 함수형 Component에서는 훅(Hooks) 개념을 이용하여 더욱 쉽게 사용 가능

## useState 사용하기

syntax : useState(초기값)
    배열을 반환하는데 첫 번째 배열의 요소에는 현재값(Getter), 두 번째 배열의 요소에는 상태를 변경하는 Setter를 반환
    const [data, setData] = useState("초기값");
    state는 어떤 타입이라도 관계 없이 사용이 가능하며 여러개일 수 있고 직접 수정할 수 없음(setter를 이용해야함)

## 잘못된 re-rendering이 발생했을 경우 re-rendering 요인을 확인
    1. setState에 의한 state 변경
    2. 상위 component에서 전달받은 props의 변경
    3. 상위 component가 re-rendering 할 시 하위 component도 re-rendering
    4. Provider의 value prop이 바뀔 때 Context, Provider, 하위에서 해당 component를 구독하고 있는 모든 component를 re-rendering(ContextAPI에서)
    5. 리덕스 스토어의 state에 변경 발생 시 useSelector를 이용해 리덕스 스토어의 state를 조회하는 Component re-rendering(리덕스에서)

## React Event
    [이벤트 규칙]
    1. 이벤트 이름은 전부 camel 표기법
    2. 이벤트를 전달할 때는 {함수} 형태로 사용

    == input값 핸들링 하기
    1. input값이 변화되는 이벤트 처리는 onChange로 연결
    2. 이벤트 내의 첫 번째 매개변수에서 event 객체 활용(e.target.속성)
    3. setter를 이용해서 state 변경
    4. value 속성을 이용해서 state 동기화 처리하기
        - value = {상태값}을 처리
        - state를 통해 input의 value를 제어하지 않으면 잘못된 에러문자를 만날 수 있음
    
    [마우스 이벤트]
    click       요소에 클릭 시
    dbclick     요소에 더블클릭 시
    mousedown   요소 위에 버튼을 누를 시
    mouseup     요소 위에 버튼을 뗄 시
    mousemove   요소 위에 커서를 움직일 시
    mouseover   커서가 요소 위를 진입할 시
    mouseout    커서가 요소 위를 벗어날 시

    [키보드 이벤트]
    keydown     키를 누르는 동안
    keyup       키를 뗄 시
    keypress    키를 누를 시
    
    [문서 로딩 이벤트] (서버에서 웹 문서를 가져오거나 위아래로 스크롤 하는 동안 웹 문서를 브라우저에 보여주는 것과 관련된 이벤트)
    abort       문서가 완전히 로드 되기 전에 불러오기가 멈출 시
    error       문서가 정확히 로드되지 않았을 시
    load        문서 로드가 끝날 시
    resize      문서 화면 크기가 변경될 시
    scroll      문서 화면이 스크롤 될 시
    unload      문서에서 벗어날 시

    [폼 이벤트]
    blur        폼 요소에서 포커스를 잃을 시
    change      목록이나 체크 상태 등이 변경될 시(<input>, <select>, <textarea>)
    focus       폼 요소가 포커스 될 시(<label>, <select>, <textarea>, <button>)
    reset       폼이 리셋될 시
    submit      submit 버튼을 누를 시

    https://developer.mozilla.org/en-US/docs/Web/Events
    (HTML/CSS 교재 15장)

## 컴포넌트 반복
    React에서 배열을 rendering

    array.map 함수는 실행한 결과를 통해 새로운 배열을 만듦

    syntax : array.map(callbackFunction(currentValue, index, array), thisArg)
        - currentValue = 현재값
        - index = 현재 인덱스
        - array = 현재 배열
        - thisArg = callbackFunction 내에 this로 사용될 값

## filter 
    요소 갯수만큼 반복하며 boolean으로 return된 결과를 통해 새로운 list를 만듦

    syntax : array.filter(callbackFunction(currentValue, index, array), thisArg)
        - currentValue = 현재값
        - index = 현재 인덱스
        - array = 현재 배열
        - thisArg = callbackFunction 내에 this로 사용될 값

## useRef(특정 DOM 선택하기)
    Javascript에서는 getElementById(), querySelector() 사용
    React에서도 가끔 DOM을 직접 선택하는 상황이 발생할 수 있음
    이 때 사용하는 것이 useRef(ref) << hook
    useRef는 hook이고 함수형 component에서 ref에 사용
    클래스형 component에서는 callback 함수나 React.createRef 함수를 사용

## Hook
    1. 16.8 버전에 새로 추가된 기능
    2. 함수형 component에 사용되는 몇몇 기술을 Hook이라 부름(useState, useEffect, useRef)
    3. React Hook은 함수형 component가 class형 component의 기능을 사용할 수 있게 해주는 기능

    [Hook의 규칙]
    - 최상위에서만 Hook을 호출해야 함
        > 반복문, 조건문, 중첩된 함수 내에서 Hook을 실행할 수 없음
        > 이 규칙에 따라 component가 rendering될 때 마다 항상 동일한 순서로 Hook의 호출이 보장됨
    - 함수형 component에서만 Hook을 호출해야함

    [필수적인 Hook 목록]
    1. useState(초기값) : 배열 반환 첫 번째 배열의 요소에는 현재값(Getter), 두 번째 배열의 요소에는 상태를 변경하는 Setter를 반환
    
    2. useEffect(실행할 callback함수, 값에 따른 rendering 지정(배열 타입)) :
        - useEffect의 첫 번째 매개변수는 실행할 callback함수
        - useEffect의 두 번째 매개변수는 배열로 특정 값이 update될 때만 실행
        - useEffect는 component의 life-cycle을 다룸 React component가 mount, mount 이후, unmount 할 때 마다 특정 작업을 수행

    3. useRef : 특정 태그에 이름 달기
        - syntax : useRef(초기값)
        - event를 사용할 경우 특정 태그에 접근해 handling하는 경우
        - arrow function에 event 매개변수를 이용해 자신 태그에는 접근 가능하나 다른 태그에는 접근하기 어려움
            이런 경우에는 useRef() Hook을 통하여 특정 태그에 일므을 지정하고 handling할 수 있음
        - useRef는 초기값을 객체({current.value})로 저장하기 때문에 변수명.current로 현재 태그에 접근할 수 있음
        - useRef Hook은 DOM을 선택하는 용도 외에 component 안에서 조회 및 수정(변수 관리)을 할 수 있다
        - useRef로 관리하는 변수는 값이 바뀌어도 component를 re-rendering하지 않음
        - 주로 사용되는 경우
            > setTimeout, setInterval을 통해 만들어진 id
            > 외부 library를 사용하여 생성된 instance
            > scroll 위치

    4. useMemo : 연산한 값 재사용하기
        - 성능 최적화를 위해 연산된 값을 useMemo라는 Hook으로 재사용

    5. useCallback : 함수 재사용하기
        - useCallBack은 위의 useMemo와 비슷한 Hook
        - useMemo는 특정 결과값을 재사용하는 반면, useCallBack은 특정 함수를 새로 만들지 않고 재사용

    6. 외부에서 state 사용하기 :useReducer()
        - useReducer는 외부에서 state를 관리할 수 있게 만듦
        - reducer 함수를 외부에서 export하게 되면 로직을 분리할 수 있음(재사용 가능)
        - const [현재값, reducer action 함수] = useReducer(리듀서함수명, state값);

        reducer 함수의 모형
        const reducer 함수명 = (state값, reducer action 함수로 전달하는 상태값)
            - 초기값을 action 상태에 따라 변경하고 return state값;
            - ex) const reducer = (state, action) => {
                // 새로운 상태를 만드는 로직
                // const nextState = ...
                return nextState;
            }

## component 생명 주기
    생성(mount) > 업데이트(updating) > 제거(unmounting)
    - mount : component가 생성될 때 발생하는 생명 주기
        > constructor : component가 생성되면 가장 먼저 실행되는 method 이고 this.props, this.state에 접근이 가능하며 react 요소를 반환
        > getDerivedstateFromProps : props로부터 파생된 state를 가져옴 props로 받아온 값을 state에 넣고 싶을 때 사용
        > render : component를 rendering하는 method
        > componentDidMount : component의 첫 번째 rendering을 마치면 호출되는 method로 호출된 시점에 화면에 component가 출력된 상태
                                이 함수가 호출된 상태에서 DOM을 사용해야 하는 외부 library 연동,
                                해당 component에서 필요로 하는 데이터를 요청하는 등의 행위를 하는데 이 때 useEffect()가 동작
                                useEffect(() => {console.log("componentDidMount")}, []) << component 등록 시 여기서 비어있는 배열 부분을 한번 실행

    - updating : component가 update되는 시점에 어떤 생명주기 method들이 호출되는지 알아봅니다
        > getDerivedStateFromProps : compoennt의 props나 state가 변경
        > shouldComponentUpdate : component의 re-rendering 여부 결정
        > componentDidUpdate : component가 update 된 후 발생, useEffect() 동작 의존성 배열이 변할 때 실행하는 것과 같다
                                useEffect(() => {console.log("count or exampleProp changed")}, [count, exampleProp])
                                
    - unmount : unmount는 component가 화면에서 사라지는것을 의미함 unmount에 관련된 생명 주기 method는 componentWillUnmount
        > componentWillUnmount : component가 화면에서 사라지기 직전 호출 여기서는 주로 DOM에 직접 등록했던 이벤트를 제거, 만약 setTimeout 설정이 걸려있다면 clearTimeout을 통해 제거
                                    추가로 외부 library를 사용중이면 해당 library에 dispose 기능 존재 시 호출 처리를 할 수 있음
                                    useEffect(() => {
                                        console.log("");
                                        return(() => exampleAPI.unsubscribe())
                                    })

    ** useEffect 안에서 객체 타입 state를 setState 하는 경우 무한 루프에 빠질 수 있는데 이 때 해결 방안
        https:/kinsta.com/knowledgebase/react-hook-useeffect-has-a-missing-dependency/

## custom Hooks 만들기


## React 스타일링    
    1. 태그에 직접 지정하기
        - 태그에 직접 디자인을 적용할 때는 {}로 묶고
            CSS 속성 중 - 은 카멜 표기법으로 대체
    2. 일반 CSS 파일 적용
        - import './App.css'
    3. CSS 모듈로 적용(비권장)
        - component명.module.css 형식으로 작성
        - 선택자에 고유한 해시값을 부여해서 다른 파일과의 디자인 중복을 막아줌
        - :global 키워드를 이용해 전역 선택자(이름) 선언이 가능
    4. public 폴더에 CSS디자인

[CSS 파일 이름 규칙]
의 이름을 반드시 포함해 만드는 것을 추천

## Sass(Syntatically Awemsome Style Sheet))
     Css pre-processer로 sass와 scss 확장자 사용
      


## styled-components
    JS 안에 CSS를 작성하는 기술 인기있는 library emotion과 styled-jsx가 있음

    styled-components : https://styled-components.com/
    emotion : https://github.com/emotion-js/emotion
    styled-jsx : https://github.com/vercel/styled-jsx
    
## Tagged Template Literal
    (https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Template_literals)
    styled-components가 내부적으로 어떻게 동작하는지 이해하는 데 도움됨

    const name = 'react';
    const message = `hello ${name}`;
    console.log(message);
